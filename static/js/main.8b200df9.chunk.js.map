{"version":3,"sources":["Form.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","Container","onSubmit","getWeather","Input","icon","Icon","name","inverted","circular","link","placeholder","Button","color","Weather","description","city","error","temperature","temperaturef","src","Segment","Header","as","App","useState","weather","setWeather","APIKEY","e","a","target","elements","value","preventDefault","fetch","then","res","json","data","apiData","Math","round","main","temp_min","className","style","backgroundImage","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8b200df9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './form.css';\r\nimport { Input,Button,Icon ,Container} from 'semantic-ui-react';\r\nconst Form = (props) => {\r\n    return (\r\n        <Container>\r\n        <form onSubmit={props.getWeather}>\r\n          <Input \r\n    icon={<Icon name='search' inverted circular link />}\r\n    placeholder='Search...' name = 'city'\r\n  />\r\n       <br></br>    \r\n       <br></br>  \r\n            <Button color ='yellow'  icon={<Icon name='search' inverted circular link />}>search</Button>\r\n        </form>\r\n        </Container>\r\n    )\r\n   \r\n}\r\n\r\nexport default Form; ","import React from 'react'\r\nimport { Header,Segment} from 'semantic-ui-react';\r\n\r\nconst Weather = ({description, city,  error, temperature,icon, temperaturef}) => {\r\n    return (\r\n        <div>\r\n            <img src ={\"http://openweathermap.org/img/wn/\"+icon+\"@2x.png\"}/>\r\n            {city && <p>{city}</p>}\r\n            <br></br>\r\n            <div>\r\n\r\n    <Segment circular >\r\n      <Header as='h2'>\r\n        {temperature}°C\r\n       \r\n      </Header>\r\n    </Segment>\r\n    <Segment circular inverted >\r\n      <Header as='h2' inverted>\r\n      \r\n      {temperaturef}°F\r\n      </Header>\r\n       \r\n    </Segment>\r\n  </div>\r\n\r\n            {description && <p> Conditions: {description}</p>}\r\n            {error && <p>{error}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather; ","import React,{useState} from 'react';\nimport { Input,Button,Icon ,Container,Segment,Menu} from 'semantic-ui-react';\nimport './App.css';\nimport Form from './Form';\nimport Weather from './Weather';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header } from 'semantic-ui-react';\nimport { Navbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  \n  const [weather,setWeather] = useState([])\n  const APIKEY = 'c2514daffcbd261b8f9940d30fc01d0a'\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value\n   \n      e.preventDefault()\n    const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${APIKEY}`)\n      .then( res => res.json())\n      .then(data => data)\n      if(city ) {\n      setWeather({\n        data: apiData,\n        city: apiData.name,\n        icon: apiData.weather[0].icon,\n        description: apiData.weather[0].description,\n        temperature: Math.round(apiData.main.temp_min -273.15),\n        temperaturef: Math.round((Math.round(apiData.main.temp_min -273.15))*1.8+32),\n        error:\"\"\n      }\n      )} else {\n        setWeather({\n          data: '',\n          city: '',\n         \n          description: '',\n          temperature: '',\n          error:\"Please Type A City And Country\"\n      }\n      )}\n    \n  }\n  \nconst src = `https://source.unsplash.com/1820x900/?weather,?=${weather.description}`\n  return (\n    <div className=\"App\" style ={{  backgroundImage:`url(${src})`}}>\n      <div className=\"Navbar\" >\n    \n    <span className ='wes' style={{color : 'orange' }}>24</span><Icon name='x'/><span className ='wes'>7 </span><span className ='wes'>WEATHER</span><span className ='wes' style={{color : 'orange' }}>CAST.com</span> <Icon name='cloud'/> \n   \n\n   \n  </div>\n      <Form getWeather={fetchData} />\n      <Weather\n      icon ={weather.icon}\n      city={weather.city}\n      description={weather.description}\n      temperature={weather.temperature}\n      temperaturef={weather.temperaturef}\n      error={weather.error}\n      />\n      {console.log(weather.data)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}